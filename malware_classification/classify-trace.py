import sys
import joblib
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import f1_score
from sklearn.base import BaseEstimator
import lightgbm as lgb

LABEL_FILE = 'apt_trace_labels.txt'

def load_model(model_file):
    """Load the persisted model and validate it."""
    try:
        model = joblib.load(model_file)
        if not isinstance(model, (BaseEstimator, lgb.Booster)):
            raise TypeError("Loaded model is not a valid sklearn or LightGBM model.")
        return model
    except Exception as e:
        print(f"Error loading the model: {e}")
        sys.exit(1)


def _remove_consecutive_duplicates(trace):
    """Helper function to remove consecutive duplicates from a trace"""
    calls = trace.split(',')
    result = [calls[0]]
    for i in range(1, len(calls)):
        if calls[i] != calls[i - 1]:
            result.append(calls[i])
    return ','.join(result)


def remove_repeated_calls(traces):
    """Remove consecutive repeated API calls within each trace."""
    return [_remove_consecutive_duplicates(trace) for trace in traces]


def preprocess_traces(input_file):
    """Preprocess the traces by removing consecutive duplicates."""
    # Read the input traces
    with open(input_file, 'r') as f:
        traces = [line.strip() for line in f]

    # Remove consecutive repeated API calls within each trace
    traces = remove_repeated_calls(traces)

    # Convert the traces into n-grams
    # print("Using n-grams with ngram_range (1,3)")
    vectorizer = CountVectorizer(ngram_range=(1, 3))
    X = vectorizer.fit_transform(traces)  # Transform traces into vectors
    return X.toarray()


def classify_traces(model, traces):
    """Classify each trace and return the predicted labels."""
    try:
        if isinstance(model, lgb.Booster):
            return model.predict(traces).round().astype(int)  # Assuming binary classification
        return model.predict(traces)
    except AttributeError as e:
        print(f"Error during prediction: {e}")
        sys.exit(1)

def load_true_labels():
    """Load the true labels from the apt_trace_labels.txt file."""
    with open(LABEL_FILE, 'r') as f:
        labels = [line.strip() for line in f]
    return labels

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: python classify-trace.py <input_file>")
        sys.exit(1)

    # Load the input file from the command line
    input_file = sys.argv[1]

    # Load the trained model
    model = load_model('best_model.joblib')

    # Preprocess the traces from the input file
    # print("Preprocessing traces...")
    traces = preprocess_traces(input_file)

    # Classify the traces
    predictions = classify_traces(model, traces)

    # print("Calculating F1 score...")
    true_labels = load_true_labels()

    # Calculate and print the F1 score
    f1 = f1_score(true_labels, predictions, average='macro')
    # print(f"F1 Score: {f1:.3f}")

    # Output predictions
    for prediction in predictions:
        print(prediction)

    print(f"F1 Score: {f1:.3f}")
