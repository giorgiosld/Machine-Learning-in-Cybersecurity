import sys
import joblib
from sklearn.feature_extraction.text import CountVectorizer


def load_model(model_file):
    """Load the persisted model."""
    return joblib.load(model_file)


def preprocess_traces(input_file):
    """Preprocess the traces using the same vectorizer."""
    # Read the input traces
    with open(input_file, 'r') as f:
        traces = [line.strip() for line in f]

    # Convert the traces into a bag-of-words feature vector, like in training
    vectorizer = CountVectorizer(tokenizer=lambda x: x.split(','), binary=True)
    X = vectorizer.fit_transform(traces)  # Transform traces into vectors
    return X


def classify_traces(model, traces):
    """Classify each trace and return the predicted labels."""
    return model.predict(traces)


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: python classify-trace.py <input_file>")
        sys.exit(1)

    # Load the input file from the command line
    input_file = sys.argv[1]

    # Load the trained model
    model = load_model('best_model.joblib')

    # Preprocess the traces from the input file
    traces = preprocess_traces(input_file)

    # Classify the traces
    predictions = classify_traces(model, traces)

    # Output the label for each trace (one label per line)
    for label in predictions:
        print(label)
